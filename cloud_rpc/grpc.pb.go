// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: grpc.proto

package cloud_rpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsonData string `protobuf:"bytes,1,opt,name=JsonData,proto3" json:"JsonData,omitempty"`
}

func (x *Msg) Reset() {
	*x = Msg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Msg) ProtoMessage() {}

func (x *Msg) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Msg.ProtoReflect.Descriptor instead.
func (*Msg) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{0}
}

func (x *Msg) GetJsonData() string {
	if x != nil {
		return x.JsonData
	}
	return ""
}

var File_grpc_proto protoreflect.FileDescriptor

var file_grpc_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x72, 0x70, 0x63, 0x22, 0x21, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x32, 0x64, 0x0a, 0x0e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x56, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x06,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x73, 0x67, 0x1a, 0x0e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x73, 0x67, 0x12, 0x28, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x0e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x73, 0x67,
	0x1a, 0x0e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x73, 0x67,
	0x32, 0x68, 0x0a, 0x12, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x0e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x73, 0x67,
	0x1a, 0x0e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x73, 0x67,
	0x12, 0x28, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0e, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x73, 0x67, 0x1a, 0x0e, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x73, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_grpc_proto_rawDescOnce sync.Once
	file_grpc_proto_rawDescData = file_grpc_proto_rawDesc
)

func file_grpc_proto_rawDescGZIP() []byte {
	file_grpc_proto_rawDescOnce.Do(func() {
		file_grpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_proto_rawDescData)
	})
	return file_grpc_proto_rawDescData
}

var file_grpc_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_grpc_proto_goTypes = []interface{}{
	(*Msg)(nil), // 0: cloud_rpc.Msg
}
var file_grpc_proto_depIdxs = []int32{
	0, // 0: cloud_rpc.CloudVMService.Create:input_type -> cloud_rpc.Msg
	0, // 1: cloud_rpc.CloudVMService.Delete:input_type -> cloud_rpc.Msg
	0, // 2: cloud_rpc.CloudDockerService.Create:input_type -> cloud_rpc.Msg
	0, // 3: cloud_rpc.CloudDockerService.Delete:input_type -> cloud_rpc.Msg
	0, // 4: cloud_rpc.CloudVMService.Create:output_type -> cloud_rpc.Msg
	0, // 5: cloud_rpc.CloudVMService.Delete:output_type -> cloud_rpc.Msg
	0, // 6: cloud_rpc.CloudDockerService.Create:output_type -> cloud_rpc.Msg
	0, // 7: cloud_rpc.CloudDockerService.Delete:output_type -> cloud_rpc.Msg
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_grpc_proto_init() }
func file_grpc_proto_init() {
	if File_grpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_grpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Msg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_grpc_proto_goTypes,
		DependencyIndexes: file_grpc_proto_depIdxs,
		MessageInfos:      file_grpc_proto_msgTypes,
	}.Build()
	File_grpc_proto = out.File
	file_grpc_proto_rawDesc = nil
	file_grpc_proto_goTypes = nil
	file_grpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CloudVMServiceClient is the client API for CloudVMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CloudVMServiceClient interface {
	Create(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Msg, error)
	Delete(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Msg, error)
}

type cloudVMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudVMServiceClient(cc grpc.ClientConnInterface) CloudVMServiceClient {
	return &cloudVMServiceClient{cc}
}

func (c *cloudVMServiceClient) Create(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, "/cloud_rpc.CloudVMService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudVMServiceClient) Delete(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, "/cloud_rpc.CloudVMService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudVMServiceServer is the server API for CloudVMService service.
type CloudVMServiceServer interface {
	Create(context.Context, *Msg) (*Msg, error)
	Delete(context.Context, *Msg) (*Msg, error)
}

// UnimplementedCloudVMServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCloudVMServiceServer struct {
}

func (*UnimplementedCloudVMServiceServer) Create(context.Context, *Msg) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedCloudVMServiceServer) Delete(context.Context, *Msg) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterCloudVMServiceServer(s *grpc.Server, srv CloudVMServiceServer) {
	s.RegisterService(&_CloudVMService_serviceDesc, srv)
}

func _CloudVMService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudVMServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_rpc.CloudVMService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudVMServiceServer).Create(ctx, req.(*Msg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudVMService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudVMServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_rpc.CloudVMService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudVMServiceServer).Delete(ctx, req.(*Msg))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudVMService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloud_rpc.CloudVMService",
	HandlerType: (*CloudVMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CloudVMService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CloudVMService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}

// CloudDockerServiceClient is the client API for CloudDockerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CloudDockerServiceClient interface {
	Create(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Msg, error)
	Delete(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Msg, error)
}

type cloudDockerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudDockerServiceClient(cc grpc.ClientConnInterface) CloudDockerServiceClient {
	return &cloudDockerServiceClient{cc}
}

func (c *cloudDockerServiceClient) Create(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, "/cloud_rpc.CloudDockerService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDockerServiceClient) Delete(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, "/cloud_rpc.CloudDockerService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudDockerServiceServer is the server API for CloudDockerService service.
type CloudDockerServiceServer interface {
	Create(context.Context, *Msg) (*Msg, error)
	Delete(context.Context, *Msg) (*Msg, error)
}

// UnimplementedCloudDockerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCloudDockerServiceServer struct {
}

func (*UnimplementedCloudDockerServiceServer) Create(context.Context, *Msg) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedCloudDockerServiceServer) Delete(context.Context, *Msg) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterCloudDockerServiceServer(s *grpc.Server, srv CloudDockerServiceServer) {
	s.RegisterService(&_CloudDockerService_serviceDesc, srv)
}

func _CloudDockerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDockerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_rpc.CloudDockerService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDockerServiceServer).Create(ctx, req.(*Msg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDockerService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDockerServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_rpc.CloudDockerService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDockerServiceServer).Delete(ctx, req.(*Msg))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudDockerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloud_rpc.CloudDockerService",
	HandlerType: (*CloudDockerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CloudDockerService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CloudDockerService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}
